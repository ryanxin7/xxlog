import{_ as s,V as r,W as d,Y as t,Z as e,a0 as i,X as n,C as l}from"./framework-8eb1d601.js";const c={},o=n('<h1 id="nginx基础-http协议" tabindex="-1"><a class="header-anchor" href="#nginx基础-http协议" aria-hidden="true">#</a> Nginx基础-Http协议</h1><h2 id="_1-http协议介绍" tabindex="-1"><a class="header-anchor" href="#_1-http协议介绍" aria-hidden="true">#</a> 1.Http协议介绍</h2><h3 id="_1-1什么是url" tabindex="-1"><a class="header-anchor" href="#_1-1什么是url" aria-hidden="true">#</a> 1.1什么是URL?</h3><p>通常我们在访问一个网站页面时，请求到的内容通称为&quot;资源&quot;。而”资源“这一概念非常宽泛，它可以是一份文档，一张图片，或所有其他你能够想到的格式。每个资源都由一个URI来进行标 识;比如:<code>http://fj.xuliangwei.com/public/tt.jpeg</code>这样的资源，我们会将该其称为URL地址; <br></p><p><strong>百度百科解释</strong>: URL 简称统一资源定位符，用来唯-地标识万维网中的某一个资源。URL由协议、主机名称、端口以及文件名几部分构成。深入理解URL的组成部分。</p><br><h3 id="_1-2什么是html" tabindex="-1"><a class="header-anchor" href="#_1-2什么是html" aria-hidden="true">#</a> 1.2什么是HTML?</h3><p>Html简称Web Page,一个完整的Html页面可能会包含很多个URL的资源。(反之:我们也可以理解一个HTML文件是由多个不同的URL资源拼接而成的。)</p><br><br><h3 id="_1-3什么是http" tabindex="-1"><a class="header-anchor" href="#_1-3什么是http" aria-hidden="true">#</a> 1.3什么是HTTP?</h3><p>HTTP (Hyper Text Transfer Protocol) 中文名为超文本传输协议。<br> 是一种能够获取如HTML 这样网络资源的通讯协议。它是在Web.上进行数据交换的基础。 <br></p>',12),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview",target:"_blank",rel:"noopener noreferrer"},p=n('<figure><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-Linux/web-get.jpg" alt="web-get" tabindex="0" loading="lazy"><figcaption>web-get</figcaption></figure><br><h3 id="_1-4-url、html、http之间关系" tabindex="-1"><a class="header-anchor" href="#_1-4-url、html、http之间关系" aria-hidden="true">#</a> 1.4 URL、HTML、HTTP之间关系</h3><p>一个完整的HTML 页面是由多个不同的Url资源组成的;而HTTP 协议主要是用来传输这种HTML 页面的;</p><br><br><h2 id="_2-http工作原理" tabindex="-1"><a class="header-anchor" href="#_2-http工作原理" aria-hidden="true">#</a> 2.Http工作原理</h2><h3 id="_2-1-图解http工作原理" tabindex="-1"><a class="header-anchor" href="#_2-1-图解http工作原理" aria-hidden="true">#</a> 2.1 图解HTTP工作原理</h3><p>我们详细的了解下HTTP的工作原理，我们到底是如何获取到服务器上的页面。</p><figure><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-Linux/http原理.jpg" alt="http原理" tabindex="0" loading="lazy"><figcaption>http原理</figcaption></figure><br>',11),u=t("br",null,null,-1),b=n(`<h2 id="_3-http请求request" tabindex="-1"><a class="header-anchor" href="#_3-http请求request" aria-hidden="true">#</a> 3. Http请求Request</h2><p>HTTP请求的一个例子:</p><figure><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-Linux/http请求.jpg" alt="http请求" tabindex="0" loading="lazy"><figcaption>http请求</figcaption></figure><h3 id="_3-1-method方法" tabindex="-1"><a class="header-anchor" href="#_3-1-method方法" aria-hidden="true">#</a> 3.1 Method方法</h3><p>客户端向服务端发送请求时，会根据不同的资源发送不同的请求方法Method : <br></p><ul><li>GET :用于获取URI对应的资源; (比如看朋友圈)</li><li>POST :用于提交请求，可以更新或者创建资源，是非幂等的; (发布朋友圈)</li><li>PUT :用于向指定的URI传送更新资源，是幂等的; (更新朋友圈)</li><li>DELETE :用于向指定的URI删除资源; (比如删朋友圈)</li><li>HEAD :用于检查</li></ul><br><p>般创建对象时用POST，更新对象时用PUT ;<br></p><ul><li>PUT是幂等的，POST是非幂等的;</li><li>幂等:对于相同的输入，每次得到的结果都是相等的; <br></li></ul><h3 id="_3-2-请求header" tabindex="-1"><a class="header-anchor" href="#_3-2-请求header" aria-hidden="true">#</a> 3.2 请求Header</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>:authority: Www <span class="token builtin class-name">.</span> oldxu. com
:method: GET
:path: /
<span class="token builtin class-name">:</span> scheme: https
Accept: text/html ，  <span class="token comment">#请求的类型</span>
Accept- Encoding: gzip, deflate  <span class="token comment">#是否进行压缩</span>
Accept- Language: zh-CN, zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>  <span class="token comment">#请求的语言</span>
Cache-Control: max-age<span class="token operator">=</span><span class="token number">0</span>  <span class="token comment">#缓存</span>
Connection:
keep-alive <span class="token comment"># TCP长连接</span>
Host: www.oldxu.com  <span class="token comment">#请求的域名</span>
If -Modified-Since: Fri, 04 May <span class="token number">2018</span> 08:13:44 GMT <span class="token comment">#修改的时间</span>
User-Agent: Mozilla/5.0 <span class="token comment">#请求浏览器的工具</span>
<span class="token string">&quot;===请求一个空行===&quot;</span>
<span class="token string">&quot;===请求内容主体===&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><br><h3 id="_3-3请求connection" tabindex="-1"><a class="header-anchor" href="#_3-3请求connection" aria-hidden="true">#</a> 3.3请求Connection</h3><p>Http请求中的长连接与短连接是什么:</p>`,15),g=t("li",null,"http1.0 协议使用的是短连接:建立-次tcp的连接，发起一次http的请求，结束，tcp 断开。",-1),m=t("li",null,"http1.1协议使用的是长连接:建立- -次tcp的连接，发起多次http的请求，结束，tcp 断开。",-1),x={href:"https://http2.akamai.com/demo/http2-lab.html",target:"_blank",rel:"noopener noreferrer"},v=t("br",null,null,-1),_=n(`<p><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-Linux/http-connection类型.jpg" alt="http-connection类型" loading="lazy"><br><br></p><h2 id="_4-http响应response" tabindex="-1"><a class="header-anchor" href="#_4-http响应response" aria-hidden="true">#</a> 4.Http响应Response</h2><ul><li>HTTP响应的一个例子:</li></ul><figure><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-Linux/http-response.jpg" alt="http-response" tabindex="0" loading="lazy"><figcaption>http-response</figcaption></figure><br><br><h3 id="_4-1-相应头部header" tabindex="-1"><a class="header-anchor" href="#_4-1-相应头部header" aria-hidden="true">#</a> 4.1 相应头部header</h3><div class="language-s line-numbers-mode" data-ext="s"><pre class="language-s"><code>#服务端响应的头部信息
HTTP/1.1 200 OK #返回服务器的http协议，状态码
Date: Fri， 14 Sep 2018 09:14:28 GMT #返回服务器的时间
Server: Apache/2.4. 6  #返回服务器使用的软件Apache
Connection: Keep-Alive  # TCP长连接
Keep-Alive: timeout=5， max=100  #长连接的超时时间
&quot;===返回一个空行===&quot;
&quot;=== 返回内容主体===&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><br><h3 id="_4-2-响应status" tabindex="-1"><a class="header-anchor" href="#_4-2-响应status" aria-hidden="true">#</a> 4.2 响应Status</h3><p>http响应状态码Status -Code以3位数字组成，用来标识该请求是否成功，比如是正常还是错误等，HTTP/1.1 中状 态码可以分为五大类。</p><div class="center"><table><thead><tr><th style="text-align:center;">状态码</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">1xx</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:center;">2xx</td><td>成功，操作被成功接收并处理</td></tr><tr><td style="text-align:center;">3xx</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:center;">4xx</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:center;">5xx</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table></div><br><br><h3 id="_4-4-响应code" tabindex="-1"><a class="header-anchor" href="#_4-4-响应code" aria-hidden="true">#</a> 4.4 响应Code</h3><p><strong>以下是常见状态码</strong></p><table><thead><tr><th style="text-align:center;">状态码</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">200</td><td>表示成功客户端成功接收到了服务端返回的数据，这是最常见的状态码</td></tr><tr><td style="text-align:center;">206</td><td>客户端发完请求后，服务端只是返回了部分数据，就会出现该状态码，例如当下载一个很大的文件时，在没有下载完成前就会出现该状态码</td></tr><tr><td style="text-align:center;">301</td><td>永久重定向(redirect)</td></tr><tr><td style="text-align:center;">302</td><td>临时重定向(redirect)</td></tr><tr><td style="text-align:center;">400</td><td>客户端请求语法错误，服务端无法理解;</td></tr><tr><td style="text-align:center;">401</td><td>服务端开启了用户认证，而客户端没有提供正确的验证信息</td></tr><tr><td style="text-align:center;">403</td><td>服务端不允许客户端访问，或者没有找到默认返回页面</td></tr><tr><td style="text-align:center;">404</td><td>客户端请求的资源不存在</td></tr><tr><td style="text-align:center;">413</td><td>客户端向服务端上传一个比较大的文件, 并且文件大小超过了服务端的限制</td></tr><tr><td style="text-align:center;">500</td><td>服务端出现了内部错误，需要进行人为排查故障</td></tr><tr><td style="text-align:center;">502</td><td>服务器充当代理角色时，后端被代理的服务器不可用或者没有正常回应</td></tr><tr><td style="text-align:center;">503</td><td>服务当前不可用，由于超载或系统维护，服务器暂时的无法处理客户端请求</td></tr><tr><td style="text-align:center;">504</td><td>服务器充当代理角色时，后端的服务端没有按时返回数据，超时了</td></tr></tbody></table>`,18);function T(f,y){const a=l("ExternalLinkIcon");return r(),d("div",null,[o,t("p",null,[t("a",h,[e("HTTP的概述参考"),i(a)]),e(" URL简单理解: HTTP 协议就是将用户请求的HTML页面从一台Web服务器传输到客户端浏览器的一种协议。")]),p,e(" 整个用户访问网站过程就是DNS-TCP-HTTP "),u,e(" ![http工作原理](https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-Linux/http工作原理.jpg) "),b,t("ul",null,[g,m,t("li",null,[t("a",x,[e("HTTP协议版本参考URL、HTTP1.1与HTTP2.0速度对比"),i(a)]),v])]),_])}const P=s(c,[["render",T],["__file","nginx-basics.html.vue"]]);export{P as default};
