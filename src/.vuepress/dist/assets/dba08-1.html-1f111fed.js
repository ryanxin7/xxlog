import{_ as n,V as a,W as e,Z as l,X as s}from"./framework-8eb1d601.js";const o={},p=s(`<h1 id="主从复制高级进阶" tabindex="-1"><a class="header-anchor" href="#主从复制高级进阶" aria-hidden="true">#</a> 主从复制高级进阶</h1><h2 id="_1-上节回顾" tabindex="-1"><a class="header-anchor" href="#_1-上节回顾" aria-hidden="true">#</a> 1.上节回顾</h2><h3 id="_1-1-binlog-format" tabindex="-1"><a class="header-anchor" href="#_1-1-binlog-format" aria-hidden="true">#</a> 1.1 binlog_format</h3><ul><li><p>SBR update t1 set name=&#39;zs&#39; where id&gt;50; 更新50条数据 记录1条命令</p></li><li><p>RBR 记录50行日志</p></li><li><p>MBR 由系统自动选择</p></li></ul><br><br><h3 id="_1-2-主从故障" tabindex="-1"><a class="header-anchor" href="#_1-2-主从故障" aria-hidden="true">#</a> 1.2 主从故障</h3><br><p><strong>IO线程故障</strong></p><ul><li>连主库 取日志 存到 relaylog</li></ul><p><strong>SQL 线程</strong></p><ul><li>回放拿过来的日志</li></ul><br><br><h3 id="_1-3-主从延时" tabindex="-1"><a class="header-anchor" href="#_1-3-主从延时" aria-hidden="true">#</a> 1.3 主从延时</h3><p>需要在两方面解决由于单进程和串行处理导致的主从延迟问题。</p><br><p><strong>主库</strong>:</p><p><strong>DUMP_T</strong> 线程 默认串行执行</p><p>参数：<code>show variables like &#39;group_commit%&#39;;</code> 允许主库等一段时间一起提交给从库</p><figure><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-DBA/Section8-2-1.png" alt="从库只读" tabindex="0" loading="lazy"><figcaption>从库只读</figcaption></figure><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--使用 gtid </span>
sync_binlog
binlog_group_commit_sync_delay <span class="token comment">--等待时间毫秒</span>
binlog_group_commit_sync_no_delay_count <span class="token comment">--累计多少个</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><br><p><strong>从库</strong>:</p><p><strong>SQL</strong> 线程 : 5.7 GTID MTS 默认只有一个线程进行回放,由于从库是单SQL线程,导致,不管传的日志有多少,只能一次执行一个事务。<br></p><p><strong>5.6 版本</strong>,有了GTID,可以实现多SQL线程,但是只能基于不同库的事务进行并发回放.(database) （不能保证同一库内事务无法保证顺序按一定逻辑顺序执行）。<br></p><p><strong>5.7 版本</strong>中,有了增强的GTID,增加了seq_no（通线程下的序列号码）标记,增加了新型的并发SQL线程模式(logical_clock 逻辑时钟),MTS技术 。<br></p><p><strong>查看从库的SQL工作线程</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%worker%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_1-4-主从延时的监控" tabindex="-1"><a class="header-anchor" href="#_1-4-主从延时的监控" aria-hidden="true">#</a> 1.4 主从延时的监控</h3><br><p>主从延迟相关检查参数</p><br><p><strong>(1) 检查主从有没有的问题?</strong></p><p><code>Seconds_Behind_Master: 0</code></p><br><p><strong>(2) 有没有主库原因?</strong></p><p><code>Master_Log_File: mysql-bin.000003</code><code>Read_Master_Log_Pos: 154</code></p><p><code>| mysql-bin.000003 | 154</code></p><br><p><strong>(3) 有没有及时回放</strong></p><p><code>Master_Log_File: mysql-bin.000003</code><code>Read_Master_Log_Pos: 154</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> relay-log.info 
./db01-relay-bin.000009
<span class="token number">367</span>
mysql-bin.000003
<span class="token number">154</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><br><h2 id="_2-主从复制高级进阶" tabindex="-1"><a class="header-anchor" href="#_2-主从复制高级进阶" aria-hidden="true">#</a> 2. 主从复制高级进阶</h2><h3 id="_2-1-延时从库" tabindex="-1"><a class="header-anchor" href="#_2-1-延时从库" aria-hidden="true">#</a> 2.1 延时从库</h3><p><strong>介绍及配置</strong></p><br><p><strong>主要使 SQL线程延时</strong>: 数据已经写入relaylog中了,SQL线程&quot;慢点&quot;运行 一般企业建议3-6小时,具体看公司运维人员对于故障的反应时间</p><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span>stop slave<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span>CHANGE MASTER <span class="token keyword">TO</span> MASTER_DELAY <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G
SQL_Delay: <span class="token number">300</span>
SQL_Remaining_Delay: <span class="token boolean">NULL</span> 最近的日志还差多少秒执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-延时从库处理逻辑故障" tabindex="-1"><a class="header-anchor" href="#_2-2-延时从库处理逻辑故障" aria-hidden="true">#</a> 2.2 延时从库处理逻辑故障</h3><p><strong>延时从库的恢复思路</strong> （用于从延迟从库的回放日志中恢复主库误删数据）</p><p>(1) 监控到数据库逻辑故障 (2) 停从库SQL线程,记录已经回放的位置点(截取日志起点)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>stop slave sql_thread <span class="token punctuation">;</span>
<span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G
Relay_Log_File: db01<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>
Relay_Log_Pos: <span class="token number">320</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) 截取relaylog</p><p><strong>起点</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G
Relay_Log_File <span class="token punctuation">,</span>Relay_Log_Pos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>终点</strong>: 主库drop之前的位置点</p><pre><code>show relaylog events in &#39;&#39;	
进行截取
</code></pre><p>(4) 模拟SQL线程回访日志</p><p>​ <strong>从库</strong> source 导入经过截取的回放日志</p><p>(5) 恢复业务</p><p><strong>情况一</strong>: 就一个库的话</p><p>从库替代主库工作</p><p><strong>情况二</strong>: 从库导出故障库,还原到主库中.</p><br><br><h4 id="_2-2-1-故障演练" tabindex="-1"><a class="header-anchor" href="#_2-2-1-故障演练" aria-hidden="true">#</a> 2.2.1 故障演练</h4><br><p><strong>主库</strong> : 模拟误删数据库操作</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> delay <span class="token keyword">charset</span> utf8mb4<span class="token punctuation">;</span>
<span class="token keyword">use</span> delay<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> t1 <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">database</span> delay<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>从库</strong>:</p><p>1.停止从库SQL 线程,获取relay的位置点 626</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> stop slave sql_thread<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G
<span class="token comment">--获取起点位置</span>
Relay_Log_File: db01<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span>
Relay_Log_Pos: <span class="token number">626</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.找到relay的截取终点</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> relaylog events <span class="token operator">in</span> <span class="token string">&#39;db01-relay-bin.000002&#39;</span><span class="token punctuation">;</span>
<span class="token operator">|</span>db01<span class="token operator">-</span>relay<span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000002</span><span class="token operator">|</span><span class="token number">1299</span><span class="token operator">|</span>Query<span class="token operator">|</span><span class="token number">7</span><span class="token operator">|</span><span class="token number">1228</span><span class="token operator">|</span> <span class="token keyword">drop</span> <span class="token keyword">database</span> delay
<span class="token comment">--截取1299 不用看右边</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><p>3.截取relay</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /data/3308/data/
mysqlbinlog --start-position<span class="token operator">=</span><span class="token number">626</span> --stop-position<span class="token operator">=</span><span class="token number">1299</span> db01-relay-bin.000002 <span class="token operator">&gt;</span>/tmp/relay.sql
<span class="token comment">#起点626 终点1299</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.恢复relay到从库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p <span class="token operator">-</span>S <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span><span class="token number">3308</span><span class="token operator">/</span>mysql<span class="token punctuation">.</span>sock 
mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> sql_log_bin<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> source <span class="token operator">/</span>tmp<span class="token operator">/</span>relay<span class="token punctuation">.</span><span class="token keyword">sql</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从库恢复逻辑损坏比直接在主库用备份恢复要快</p><br><br><h3 id="_2-3-过滤复制" tabindex="-1"><a class="header-anchor" href="#_2-3-过滤复制" aria-hidden="true">#</a> 2.3 过滤复制</h3><p>快速恢复测试环境</p><p><strong>从库</strong> :</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql <span class="token operator">-</span>S <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span><span class="token number">3308</span><span class="token operator">/</span>mysql<span class="token punctuation">.</span>sock
<span class="token keyword">drop</span> <span class="token keyword">database</span> delay <span class="token punctuation">;</span>
stop slave<span class="token punctuation">;</span>
reset slave <span class="token keyword">all</span><span class="token punctuation">;</span> 清掉主库信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>主库</strong>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-S</span> /data/33078/mysql.sock
reset master<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从库</strong>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-S</span> /data/3308/mysql.sock 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>CHANGE MASTER <span class="token keyword">TO</span> 
MASTER_HOST<span class="token operator">=</span><span class="token string">&#39;10.0.0.51&#39;</span><span class="token punctuation">,</span>
MASTER_USER<span class="token operator">=</span><span class="token string">&#39;repl&#39;</span><span class="token punctuation">,</span>
MASTER_PASSWORD<span class="token operator">=</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
MASTER_PORT<span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">,</span>
MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">&#39;mysql-bin.000001&#39;</span><span class="token punctuation">,</span>
MASTER_LOG_POS<span class="token operator">=</span><span class="token number">154</span><span class="token punctuation">,</span>
MASTER_CONNECT_RETRY<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><br><p>选择复制的单个 库或表</p><p><strong>主库</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> master <span class="token keyword">status</span> <span class="token punctuation">;</span>
binlog_do_db      <span class="token comment">--白名单</span>
binlog_ignore_db   <span class="token comment">--黑名单</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从库</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G
Replicate_Do_DB:             <span class="token comment">--库级别 白名单</span>
Replicate_Ignore_DB:         <span class="token comment">--黑名单</span>

Replicate_Do_Table:          <span class="token comment">--表级别 白名单</span>
Replicate_Ignore_Table:      <span class="token comment">--黑名单</span>

Replicate_Wild_Do_Table:     <span class="token comment">--模糊 白名单</span>
Replicate_Wild_Ignore_Table: <span class="token comment">--黑名单</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例子</strong>: 只复制REPL库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/my.cnf
<span class="token assign-left variable">replicate_do_db</span><span class="token operator">=</span>repl
systemctl restart mysqld3308
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><figure><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-DBA/Section8-2-2.png" alt="从库过滤复制" tabindex="0" loading="lazy"><figcaption>从库过滤复制</figcaption></figure><br><h3 id="_2-4-gtid-复制" tabindex="-1"><a class="header-anchor" href="#_2-4-gtid-复制" aria-hidden="true">#</a> 2.4 GTID 复制</h3><p><strong>应用介绍</strong></p><p><strong>GTID</strong> (Global Transaction ID)是对于一个已提交事务的唯一编号，并且是一个全局(主从复制)唯一的编号。</p><p><strong>它的官方定义如下</strong>：<br></p><p><code>GTID = source_id</code> ：<code>transaction_id</code><code>7E11FA47-31CA-19E1-9E56-C43AA21293967:29</code></p><br>`,119),t=s(`<p><strong>核心特性</strong>: 全局唯一,具备幂等性</p><br><br><p><strong>GTID 核心参数</strong></p><p>重要参数：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>gtid<span class="token operator">-</span><span class="token keyword">mode</span><span class="token operator">=</span><span class="token keyword">on</span>                                <span class="token comment">--启用gtid类型，否则就是普通的复制架构</span>
enforce<span class="token operator">-</span>gtid<span class="token operator">-</span>consistency<span class="token operator">=</span><span class="token boolean">true</span>               <span class="token comment">--强制GTID的一致性   必加</span>
log<span class="token operator">-</span>slave<span class="token operator">-</span>updates<span class="token operator">=</span><span class="token number">1</span>                         <span class="token comment">--slave 更新是否记入日志   强制刷新binlog</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-5-gtid复制配置过程" tabindex="-1"><a class="header-anchor" href="#_2-5-gtid复制配置过程" aria-hidden="true">#</a> 2.5 GTID复制配置过程</h3><br><p>(1) 清理环境</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>pkill mysqld
\\rm <span class="token operator">-</span>rf <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span><span class="token operator">*</span>
\\rm <span class="token operator">-</span>rf <span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>binlog<span class="token operator">/</span><span class="token operator">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>(2) 准备配置文件</p><p><strong>主库db01</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/my.cnf <span class="token operator">&lt;&lt;</span><span class="token string">EOF
[mysqld]
basedir=/application/mysql/
datadir=/data/mysql/data
socket=/tmp/mysql.sock
server_id=51
port=3306
secure-file-priv=/tmp
autocommit=0
log_bin=/data/binlog/mysql-bin
binlog_format=row
gtid-mode=on
enforce-gtid-consistency=true
log-slave-updates=1
[mysql]
prompt=db01 [<span class="token entity" title="\\\\">\\\\</span>d]&gt; 
EOF</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>prompt=db01 [\\\\d]&gt;</code> <strong>作用</strong>：定制连接进去的窗口连接会话名字 <code>\\\\d</code>显示当前库</p><figure><img src="https://xin997.oss-cn-beijing.aliyuncs.com/xinblogs/webimg-DBA/Section8-2-3.png" alt="扩展mysql界面" tabindex="0" loading="lazy"><figcaption>扩展mysql界面</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>slave1(db02)：
cat &gt; /etc/my.cnf &lt;&lt;EOF
[mysqld]
basedir=/application/mysql
datadir=/data/mysql/data
socket=/tmp/mysql.sock
server_id=52
port=3306
secure-file-priv=/tmp
autocommit=0
log_bin=/data/binlog/mysql-bin
binlog_format=row
gtid-mode=on
enforce-gtid-consistency=true
log-slave-updates=1
[mysql]
prompt=db02 [\\\\d]&gt;
EOF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>\\d:</code> 当前数据库连接客户端时通过参数指定。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>slave2<span class="token punctuation">(</span>db03<span class="token punctuation">)</span>：
cat <span class="token operator">&gt;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf <span class="token operator">&lt;&lt;</span>EOF
<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
basedir<span class="token operator">=</span><span class="token operator">/</span>application<span class="token operator">/</span>mysql
datadir<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span>
socket<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>mysql<span class="token punctuation">.</span>sock
server_id<span class="token operator">=</span><span class="token number">53</span>
port<span class="token operator">=</span><span class="token number">3306</span>
secure<span class="token operator">-</span><span class="token keyword">file</span><span class="token operator">-</span>priv<span class="token operator">=</span><span class="token operator">/</span>tmp
autocommit<span class="token operator">=</span><span class="token number">0</span>
log_bin<span class="token operator">=</span><span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>binlog<span class="token operator">/</span>mysql<span class="token operator">-</span>bin
binlog_format<span class="token operator">=</span><span class="token keyword">row</span>
gtid<span class="token operator">-</span><span class="token keyword">mode</span><span class="token operator">=</span><span class="token keyword">on</span>
enforce<span class="token operator">-</span>gtid<span class="token operator">-</span>consistency<span class="token operator">=</span><span class="token boolean">true</span>
log<span class="token operator">-</span>slave<span class="token operator">-</span>updates<span class="token operator">=</span><span class="token number">1</span>
<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
prompt<span class="token operator">=</span>db03 <span class="token punctuation">[</span>\\\\d<span class="token punctuation">]</span><span class="token operator">&gt;</span>
EOF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) 初始化数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqld --initialize-insecure <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/application/mysql  <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/data/mysql/data 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(4) 启动数据库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/etc/init.d/mysqld start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(5) 构建主从：<br></p><p>IP地址 主机名：</p><ul><li>master:51 slave:52,53</li></ul><p><strong>51主</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave  <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> repl<span class="token variable">@&#39;10.0.0.%&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>52\\53</strong>: <strong>从库</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>change master <span class="token keyword">to</span> 
master_host<span class="token operator">=</span><span class="token string">&#39;10.0.0.51&#39;</span><span class="token punctuation">,</span>
master_user<span class="token operator">=</span><span class="token string">&#39;repl&#39;</span><span class="token punctuation">,</span>
master_password<span class="token operator">=</span><span class="token string">&#39;123&#39;</span> <span class="token punctuation">,</span>
MASTER_AUTO_POSITION<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">--自动检查本地和远程设置GTID号码  ，读取relaylog最后一个事务的GTID。只要gtid号比从库新就推过来</span>
<span class="token keyword">start</span> slave<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-6-gtid-复制和普通复制的区别" tabindex="-1"><a class="header-anchor" href="#_2-6-gtid-复制和普通复制的区别" aria-hidden="true">#</a> 2.6 GTID 复制和普通复制的区别</h3><p>（0）在主从复制环境中，主库发生过的事务，在全局都是由唯一GTID记录的，更方便Failover<br> （1）额外功能参数（3个）<br> （2）change master to 的时候不再需要binlog 文件名和position号,MASTER_AUTO_POSITION=1;<br> （3）在复制过程中，从库不再依赖master.info文件，而是直接读取最后一个relaylog的 GTID号<br> （4） mysqldump备份时，默认会将备份中包含的事务操作，以下方式:<br></p><p><code>SET @@GLOBAL.GTID_PURGED=&#39;8c49d7ec-7e78-11e8-9638-000c29ca725d:1-11&#39;;</code></p><p>告诉从库，我的备份中已经有以上事务，你就不用运行了，直接从下一个GTID开始请求binlog就行。<br></p><br><p><strong><code>mysqldump --set-gitd-purged=off</code> 这个参数加了就构建不了主从</strong></p><br><br><h2 id="_3-半同步" tabindex="-1"><a class="header-anchor" href="#_3-半同步" aria-hidden="true">#</a> 3.半同步</h2><p>主库做完的从库不一定做，从库宕机<br></p><p>用于解决主从复制数据一致性问题.<br></p><p>主库的 ACK_reciver 线程专门在应用层面增加反馈机制.<br></p><p>从库relay log 落地写入磁盘会发送ACK确认 ,IO线程会返回一个ACK,主库事务才能提交.<br></p><p>如果一直ACK没收到,超过10秒钟会切换为异步复制. 放弃事务。<br></p>`,46);function r(i,d){return a(),e("div",null,[p,l(" **什么是sever_uuid，和Server-id 区别**？ "),t])}const u=n(o,[["render",r],["__file","dba08-1.html.vue"]]);export{u as default};
